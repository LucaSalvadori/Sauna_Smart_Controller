esphome:
  name: "thermostat-kitchen"
  on_boot:
     priority: -100.0
     then:
       - lambda: "id(oled_contrast).publish_state(0.4); id(load_pow).publish_state(1200);"

esp32:
  board: esp32dev
   

substitutions:
  room: Bagno # Room Name
  entity_heater: input_boolean.tut_thermo_fire    ### Change for your 'Heating' Entity
  default_low: "20"
wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

logger:
  logs:
    climate: none
    sensor: none

api:
ota:

i2c:
  - id: bus_a
    sda: GPIO21
    scl: GPIO22
    scan: false
  - id: bus_b
    sda: GPIO4
    scl: GPIO17
    scan: false


switch:
  - platform: gpio
    id: relay_heater
    pin: GPIO33
    inverted: false
    name : "relay heater"

  - platform: gpio
    id: info_LED
    pin: GPIO2
    inverted: false
    name : "info LED"

  - platform: template
    id: brightness
    optimistic: true

  - platform: template
    id: heat_pow
    optimistic: true

binary_sensor:
  - platform: template
    id: fire

  - platform: gpio
    id: button
    pin:
      number: GPIO34
      inverted: true
    on_press:
      then:
       - switch.toggle: heat_pow
    on_click:
      - min_length: 1000ms
        max_length: 20000ms
        then:
          - switch.toggle: brightness


climate:
  - platform: thermostat
    min_heating_off_time: 10s
    min_heating_run_time: 10s
    min_idle_time: 10s
    visual:
      min_temperature: 15 째C
      max_temperature: 50 째C
    name: "${room} Thermostat"
    id: this_thermostat
    sensor: internal_temperature

### Updated for ESPHome v2022.10.0 Onwards
    default_preset: Home                      ### NEW! Use this to set Preset
    on_boot_restore_from: memory            ### Use this to "Restore From Memeory" (A Saved State) OR...
    #on_boot_restore_from: default_preset      ### Use this to set Preset to start on every Boot    
    preset:
      - name: Home
        default_target_temperature_low: $default_low
        mode: 'OFF'
###########################################

    heat_action:
      - switch.turn_on: relay_heater
      - switch.turn_on: info_LED
      - lambda: id(fire).publish_state(true);
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: $entity_heater

    idle_action:
      - switch.turn_off: relay_heater
      - switch.turn_off: info_LED
      - lambda: id(fire).publish_state(false);
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: $entity_heater


output:
  - platform : template
    id : load_pow_int
    type : float
    write_action : 
      - sensor.template.publish:
          id: load_pow
          state: !lambda "return state;"

sensor:
  - platform: template
    id: oled_contrast
  - platform: template
    id: load_pow

  - platform: homeassistant
    id: power_meter
    entity_id: sensor.power_meter_active_power
    internal: true
    on_value_range:
      - below: 10
        then:
          if:
            condition:
              switch.is_on: relay_heater
            then:
              - switch.turn_off: relay_heater
              - switch.turn_off: info_LED
              - lambda: id(fire).publish_state(false);
              - logger.log: Heat OFF
      - above: !lambda "return id(load_pow).state + 100;"
        then:
          if:
            condition:
              switch.is_off: relay_heater
            then:
              - switch.turn_on: relay_heater
              - switch.turn_on: info_LED
              - lambda: id(fire).publish_state(true);
              - logger.log: Heat ON

  - platform: sht3xd
    temperature:
      name: "${room} Temperature"
      id: internal_temperature
    humidity:
      name: "${room} Humidity"
      id: internal_humidity
    i2c_id: bus_b
    address: 0x44
    update_interval: 2s

  - platform: rotary_encoder
    id: encoder
    resolution : 2
    pin_a:
      number: GPIO36
      mode: INPUT
    pin_b:
      number: GPIO39
      mode: INPUT
    on_clockwise:
      - if:
          condition:
            switch.is_on: brightness
          then:
            - sensor.template.publish:
                id: oled_contrast
                state: !lambda "return id(oled_contrast).state - 0.02;"
            - lambda: |-
                id(oled1).set_contrast( id(oled_contrast).state );
          else:
            - if:
                condition:
                  switch.is_on: heat_pow
                then:
                  - sensor.template.publish:
                      id: load_pow
                      state: !lambda "return id(load_pow).state - 50;"
                else:
                  - climate.control:
                      id: this_thermostat
                      target_temperature_low: !lambda "return id(this_thermostat).target_temperature_low - 0.5;"

    on_anticlockwise:
      then:
        - if:
            condition:
              switch.is_on: brightness
            then:
              - sensor.template.publish:
                  id: oled_contrast
                  state: !lambda "return id(oled_contrast).state + 0.02;"
              - lambda: |-
                  id(oled1).set_contrast( id(oled_contrast).state);
            else:
              - if:
                  condition:
                    switch.is_on: heat_pow
                  then:
                    - sensor.template.publish:
                        id: load_pow
                        state: !lambda "return id(load_pow).state + 50;"
                  else:
                    - climate.control:
                        id: this_thermostat
                        target_temperature_low: !lambda "return id(this_thermostat).target_temperature_low + 0.5;"

display:
  - platform: ssd1306_i2c
    id: oled1
    update_interval: 1.0s
    contrast: 0.4
    model: "SH1106 128x64"
    rotation: 0
    address: 0x3C
    i2c_id: bus_a
    lambda: |-
      if (id(fire).state) {id(ani_fire).next_frame(); it.image(0, 0, id(ani_fire));}
      else {it.image(0, 0, id(home_thermometer));}

      it.print(64, 0,  id(font1), TextAlign::TOP_CENTER, "${room}");
      it.printf(128, 0,  id(font4), TextAlign::TOP_RIGHT, " %.1f%% ", id(internal_humidity).state);

      if (id(heat_pow).state) {
        it.printf(64, 7, id(font5), TextAlign::TOP_CENTER, " %.0fW", id(power_meter).state);
      }else{
        it.printf(64, 4, id(font2), TextAlign::TOP_CENTER, " %.1f째", id(internal_temperature).state);
      }

      it.printf(0, 64, id(font3), TextAlign::BASELINE_LEFT, "%.1f째", id(this_thermostat).target_temperature_low);
      it.printf(128, 64, id(font3), TextAlign::BASELINE_RIGHT, "%.0fW", id(load_pow).state);

      if (id(brightness).state) {it.image(56, 51, id(bulb));} 
      else if (id(heat_pow).state) {it.image(56, 51, id(arrow_right));}
      else {it.image(56, 51, id(arrow_left));}
animation:
  - file: "_icons/thermostat/fan.gif"
    id: ani_fan
  - file: "_icons/thermostat/fire.gif"
    id: ani_fire
image:
  - file: "_icons/thermostat/home-thermometer.png"
    id: home_thermometer
  - file: "_icons/thermostat/arrow-left-circle-outline.png"
    id: arrow_left
  - file: "_icons/thermostat/arrow-right-circle-outline.png"
    id: arrow_right
  - file: "_icons/thermostat/lightbulb-on-outline.png"
    id: bulb
font:
  - file: "_fonts/nasalization.ttf"
    id: font1
    size: 12
  - file: "_fonts/refsan.ttf"
    id: font2
    size: 42
  - file: "_fonts/refsan.ttf"
    id: font3
    size: 13
  - file: "_fonts/refsan.ttf"
    id: font4
    size: 10
  - file: "_fonts/refsan.ttf"
    id: font5
    size: 30
